?`length<-`
?`[<-`
x = c("a", "b", "c", "d")
L = list(X = 1, Y = 2, Z = 3)
x[c(2,4)] <- c("bada", "bing")
x
L[c("Y", "Z")] <- list(21, 31)
L
x[c(2,4)] <- c("bada", "bing")
x
L[c("Y", "Z")] = list(221, 331)
L
L[6] <- 22
L
x[55] <- 1
x
vector(2,"list")
vector("list",3)
vector(5, mode = "list")
?vector
?numeric
?`[`
rev("123")
x
sort(x)
sort(x, TRUE)
?intersect
?seq
?sequence
?sprintf
match(c(32, 45, 11), c(11, 23, 34, 45))
?match
match(c(23, 45, 15), c(11, 23, 34, 45, 23))
?rexp
set.seed(1)
x = rexp(50, rate = 20)
xc = cut(x, breaks = c(-Inf, 10, 20, 30, Inf))
table(xc)
set.seed(1)
x = rexp(50, rate = 30)
xc = cut(x, breaks = c(0, 5, 10, 15, Inf))
table(xc)
rexp(3, 99)
rexp(3, 1)
rexp(3, 1/2)
set.seed(1)
x = rexp(50, rate = 1/20)
xc = cut(x, breaks = c(0, 5, 10, 15, Inf))
table(xc)
x
set.seed(1)
x = rexp(50, rate = 1/20)
xc = cut(x, breaks = c(0, 5, 10, 15, 20, Inf))
table(xc)
set.seed(1)
x = rexp(50, rate = 1/10)
xc = cut(x, breaks = c(0, 5, 10, 15, 20, Inf))
table(xc)
?rbeta
set.seed(1)
x = 10*rbeta(50, shape1 = 10, shape2 = 20)
xc = cut(x, breaks = c(0, 5, 10, 15, 20, Inf))
table(xc)
x
set.seed(1)
n = 100
x = 30*rbeta(n, shape1 = 10, shape2 = 20)
xc = cut(x, breaks = c(0, 5, 10, 15, 20, Inf))
table(xc)
set.seed(1)
n = 1000
x = 30*rbeta(n, shape1 = 10, shape2 = 20)
xc = cut(x, breaks = c(0, 5, 10, 15, 20, Inf))
table(xc)
set.seed(1)
n = 1000
x = rchisq(n, df = 10)
xc = cut(x, breaks = c(0, 5, 10, 15, 20, Inf))
table(xc)
-i
i+1
1+i
1+2i
Inf+2i
?NA
help.start()
help.start()
factor("A","B")
factor(c("New York", "Tokyo", "Mumbai"))
?factor
ordered(c("Worst", "Best", "Not Bad", "Worst"), levels = c("Worst", "Not Bad", "Best"), ordered = TRUE)
factor(c("Worst", "Best", "Not Bad", "Worst"), levels = c("Worst", "Not Bad", "Best"), ordered = TRUE)
factor(c("Worst", "Best", "Not Bad", "Worst"), levels = c("Worst", "Not Bad", "Best"), ordered = TRUE)
f = factor(c("New York", "Tokyo", "Mumbai"))
sort(f)
max(f)
?rank
?order
?sort
f
rank(f)
order(f)
is.ordered(f)
?`$<-`
v = c(1,2,3,4)
m = matrix(v, nrow = 2, ncol = 2)
m
m[3]
m[c(2,3)]
v = c(1,2,3,4)
matrix(v, nrow = 2, ncol = 2)
matrix(v, nrow = 2, ncol = 2, byrow = TRUE)
matrix(v, nrow = 4, ncol = 4)
matrix(v, nrow = 2)
matrix(v, nrow = 3)
?matrix
matrix(c(1,2,3,4), nrow = 2, dimnames = list(c("a","b"), c("c","d")))
names(m)
m1 = matrix(c(1,2,3,4), nrow = 2, dimnames = list(c("a","b"), c("c","d")))
names(m1)
dimnames(m1)
rbind(list(1,2), c(3,4))
str(rbind(list(1,2), c(3,4)))
class(rbind(list(1,2), c(3,4)))
is.list(rbind(list(1,2), c(3,4)))
length(rbind(list(1,2), c(3,4)))
.1+.2
is.list(m)
m
str(m)
dim(rbind(list(1,2), c(3,4)))
m = matrix(c(1,2,3,4), nrow = 2, dimnames = list(c("a","b"), c("c","d")))
m
m[c(1,2), ]
m
m[c(1), c(1,2)]
str(m[c(1), c(1,2)])
?head
x = c(1,2,3,4)
head(x, 2)
tail(x, 3)
tail(x, 111)
?tail
tail(library
)
c(NA, head(x, -1))
DF = data.frame(x = c(1,2,3), y = c("a", "b", "c"))
head(DF, 2)
as.vector(DF)
is.vector(DF)
str(as.vector(DF))
?as.vector
head(unclass(DF), 2)
DF == unclass(DF)
all.equal(DF, unclass(DF))
names(unclass(DF))
L = list(x = c(1,2,3), y = c("a", "b", "c"), z = c(1L, 2L, 3L))
DF = as.data.frame(L)
head(L, 2)
head(DF, 2)
L = list(x = c(1,2,3), y = c("a", "b", "c"), z = c(1L, 2L, 3L))
head(L, 2)
DF = as.data.frame(L)
head(DF, 2)
L = list(x = c(1,2,3), y = c("a", "b", "c"), z = c(1L, 2L, 3L))
head(L, 1)
DF = as.data.frame(L)
head(DF, 1)
L = list(x = c(1,2,3), y = c("a", "b", "c"), z = c("", "B", "C"))
head(L, 1)
DF = as.data.frame(L)
head(DF, 1)
L = list(x = c(1,2,3), y = c("a", "b", "c"), z = c(3L, 2L, 1L))
head(L, 1)
DF = as.data.frame(L)
head(DF, 1)
head
?methods
methods("head")
methods
methods(class="data.frame")
?methods
?head
?distributions
set.seed(1)
rnorm(10)
?sample
sample(10, prob = c(.1,.2))
x = c(3.14, 4.15, 5.16, 6.17)
sample(x, 2, replace = TRUE)
y = c(3.14)
sample(y, size = 2, replace = TRUE)
x = c(6.17, 5.16, 4.15, 3.14)
sample(x, 2, replace = TRUE)
y = c(6.17)
sample(y, size = 2, replace = TRUE)
set.seed(1)
x = c(6.17, 5.16, 4.15, 3.14)
sample(x, 2, replace = TRUE)
y = c(6.17)
sample(y, size = 2, replace = TRUE)
set.seed(11)
x = c(6.17, 5.16, 4.15, 3.14)
sample(x, 2, replace = TRUE)
y = c(6.17)
sample(y, size = 2, replace = TRUE)
set.seed(1)
x = c(6.17, 5.16, 4.15, 3.14)
sample(x, 2, replace = TRUE)
y = c(6.17)
sample(y, size = 2, replace = TRUE)
?sample
y[sample.int(length(y), size = 2)]
y[sample.int(length(y), size = 2, replace = TRUE)]
z = "a"
sample(z, size = 2, replace = TRUE)
seq(from = 1, to = 101, by = 10)
seq(from = 1, to = 9, by = 2)
seq(from = 101, to = 1, by = 10)
seq(from = 101, to = 1, by = -10)
?seq
seq(from = 1, by = 15, length.out = 100)
seq(to = 100, by = 11, length.out = 3)
seq(to = 100, by = 10, length.out = 5)
?sequence
?seq
sequence(from = "2011-11-11", to = "2015-01-01", by = "month")
seq.Date(from = "2011-11-11", to = "2015-01-01", by = "month")
seq.Date(from = as.Date("2011-11-11"), to = "2015-01-01", by = "month")
seq.Date(from = as.Date("2011-11-11"), to = as.Date("2015-01-01"), by = "month")
seq.Date(from = as.Date("2013-11-11"), to = as.Date("2015-01-01"), by = "month")
?replace
replace(1, FALSE, )
replace(1, FALSE, 2)
replace(c(1,2), c(F,T), 2)
replace(c(1,2), c(F,T), 4)
cond = (1:5) > 3
which(cond)
cond = (2:6) > 3
which(cond)
cond = c("aleph", "baz", "boz") > "b"
which(cond)
set.seed(1)
n  = 1000
x  = rchisq(n, df = 10)
xc = cut(x, breaks = c(0, 5, 10, 15, 20, Inf))
table(xc)
plot(xc)
?findInterval
?cut
findInterval(x, vec = c(0, 5, 10, 15, 20, Inf))
i = findInterval(x, vec = c(0, 5, 10, 15, 20, Inf))
summary(i)
summary(factor(i))
?findInterval
hist(x, breaks = c(0, 5, 10, 15, 20, Inf))
?hist
hist(x, breaks = c(0, 5, 10, 15, 20, max(x)))
hist(x, breaks = c(0, 5, 10, 15, 20, max(x)), plot = FALSE)
hist(x, breaks = c(0, 5, 10, 15, 20, Inf), plot = FALSE)
set.seed(1)
n  = 50
f  = factor(c("a", "b", "c"))
x  = f[ sample.int(length(f), size = n) ]
x  = f[ sample.int(length(f), size = n, replace = TRUE) ]
x
plot(x)
set.seed(1)
n  = 100
f  = factor(c("a", "b", "c"))
x  = f[ sample.int(length(f), size = n, replace = TRUE) ]
plot(x)
table(x)
plot(table(x))
plot(x)
methods("plot")
methods(class="table")
x
hist(x)
set.seed(1)
n  = 1000
x  = rchisq(n, df = 10)
xc = cut(x, breaks = c(0, 5, 10, 15, 20, Inf)) # or max(x) in place of Inf
table(xc)
hist(x)
set.seed(1)
x = rpoisson(100)
set.seed(1)
x = rpois(100)
set.seed(1)
x = rpois(100, lambda = 1/10)
x
set.seed(1)
x = rpois(100, lambda = 10)
x
table(above10 = x > 10)
set.seed(1)
n = 100
x = rpois(n, lambda = 10)
y = x^2 + rpois(n, lambda = 10)
table(above10 = x > 10)
set.seed(1)
n = 100
x = rpois(n, lambda = 10)
y = x^2 + rpois(n, lambda = 10)
table(hix = x > 10, hiy = y > x + 100)
table(hix = x > 10, hiy = y > x + 50)
xtab_set <- function(A, B){
both    <-  union(A, B)
inA     <-  both %in% A
inB     <-  both %in% B
return(table(inA, inB))
}
set.seed(1)
A <- sample(letters[1:20], 10, replace = TRUE)
B <- sample(letters[1:20], 10, replace = TRUE)
xtab_set(A, B)
xtab_set <- function(A, B){
both    <-  c(A, B)
inA     <-  both %in% A
inB     <-  both %in% B
return(table(inA, inB))
}
set.seed(1)
A <- sample(letters[1:20], 10, replace = TRUE)
B <- sample(letters[1:20], 10, replace = TRUE)
xtab_set(A, B)
DF
DF = data.frame(x = 1:3, y = 4:6)
DF$x + DF$y
within(DF,{z = x + y})
transform(DF, z = x + y)
x = c(1,1,1, 0,0)
transform(rle(x), z = 3)
x = c(1, 1, 1, 0, 0, 1, 1)
rle(x)
x = c(1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1)
rle(x)
r = rle(x)
new_r = with(r, {
lengths = tail(lengths, 3)
values  = tail(values, 3)
})
inverse.rle(new_r)
new_r
r = rle(x)
new_r = within(r, {
lengths = tail(lengths, 3)
values  = tail(values, 3)
})
inverse.rle(new_r)
r = rle(x)
new_r = with(r, {
new_lengths = tail(lengths, 3)
new_values  = tail(values, 3)
list(lengths = new_lengths, values = new_values)
})
inverse.rle(new_r)
x
new_r
?with
library(fortunes)
?fortune
fortunes("attach")
fortune("attach")
fortune("Ripley")
?replications
?rep
?vector
?logical
?numericD
?numeric
character(3)
max
min
ceiling
floor
?letters
?weekdays
weekdays
?NumericConstants
?Reserved
pi
pi0 = pi
pi = 2
pi
TRUE = 2
rm(pi)
pi
?plotmath
library(help="datasets")
library(help="R-intro")
?library
T = 2
devtools::install_github("rstudio/bookdown")
install.pacakges('devtools')
install.packages('devtools')
devtools::install_github("rstudio/bookdown")
install.packages('Rcpp')
install.packages("Rcpp")
devtools::install_github("rstudio/bookdown")
getwd()
getwd()
remove.packages("data.table")         # First remove the current version
install.packages("data.table")
remove.packages("data.table")
remove.packages("data.table")                         # First remove the current version
install.packages("data.table", type = "source",
repos = "http://Rdatatable.github.io/data.table") # Then install devel version
library(data.table)
remove.packages("data.table")         # First remove the current version
install.packages("data.table")
install.packages("data.table", type = "source",
repos = "http://Rdatatable.github.io/data.table") # Then install devel version
remove.packages("data.table")                         # First remove the current version
install.packages("data.table", type = "source",
repos = "http://Rdatatable.github.io/data.table") # Then install devel version
library(data.table)
---
x = 1
y = x
typeof(y)
str(y)
x = c(a=1,b=2)
names(x)
c(1, X = c(a = 2, b = 3, 4))
c(A = 1, A = 1)
list(1)[NA_integer_]
DT = data.table(id = c(1L, 1L, 2L), year = c(1999L, 2000L, 2000L), v = 24:22)
library(data.table)
DT = data.table(id = c(1L, 1L, 2L), year = c(1999L, 2000L, 2000L), v = 24:22)
DT
g = function(x) x + y
eval(g(3), environment(y = 5))
eval(g(3), env = environment(y = 5))
args(eval)
eval(g(3), env = as.environment(list(y = 5))
)
eval(g(3), env = as.environment(list(y = 5)))
as.environment(list(y = 5))
g
environment(g) <- list(y = 5)
environment(g) <- as.environment(list(y = 5))
g(5)
??"+"
??fortune
args(data.table)
library(data.table)
args(data.table)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
args(foverlaps)
r <- list(c(1,2,3), c(4,5,6), c(7,8,9), c(10,11,12))
rbindlist(lapply(r, setDT))
rbindlist(lapply(r, as.data.table))
r
rbindlist(lapply(r, function(x) data.table(as.list(x))))
rbindlist(lapply(r, function(x) as.data.table(as.list(x))))
dir()
dir("C:")
dir(file.path("C:", "R"))
dir(file.path("C:", "Github"))
?file.path
dir("C://R")
dir("C:/R")
dir("C:/opt")
file.path("C:","opt")
?dir.create
?file.copy
?list.files
?dir
?setwd
?rep
?Recall
?Map
Summary
Summary(1)
methods("Summary")
Summary(Sys.Date()+1:10)
Summary.Date(Sys.Date()+1:10)
sys.status()
Sys.time()
forder
data.table::frank()
data.table::frank
data.table::forder
frankv
forderv
data.table:::forderv
-1:1
-1:-11
4:6-1:3
1:3
-1:3
1-1:3
1-(1:3)
1+-1:3
1-1:3
10-1:3
-1:3+10
fortunes::fortune("assign")
fortunes::fortune("assign")
fortunes::fortune("assign")
?fortunes::fortune
fortunes::fortune(236)
fortunes::fortune("the assign function")
fortunes::fortune("the assign function")
fortune::fortunes
fortunes::fortunes
?fortunes::fortunes
??fortunes
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
