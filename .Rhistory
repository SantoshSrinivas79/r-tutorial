t = c(13L, 11L, 1L, 13L, 16L, 9L, 1L)
)
DT
# identify range of dates of interest
tg = DT[, seq.int(min(t), max(t))]
DT[.(t0 = tg - 3, t1 = tg), on=.(t > t0, t < t1),
uniqueN(id, na.rm = TRUE)
, by=.EACHI]
warnings()
DT = data.table(
x = letters[c(1, 2, 3, 4, 5)],
y = c(1, 2, 3, 4, 5),
z = c(1, 2, 3, 4, 5) > 3
)
DT
DT[, u := 5:1][]
# creating multiple
DT[, `:=`(v = 2, w = 3L)][]
# creating with dynamic names
nms = c("a", "b", "c")
DT[, (nms) := .(1, 2, 3)][]
DT = data.table(
ID = c("D", "F", "F", "B", "C", "F", "A"),
t = c(1L, 1L, 9L, 11L, 13L, 13L, 16L)
)
setkey(DT, ID, t)
DT[.("F", 10)]
DT[.("F", 13)]
DT[.("F", 1:3), on=.(ID, t)]
DT[.("F", 1:3), on=.(ID, t), roll = Inf]
DT[.("F", 1:3), on=.(ID, t), roll = -Inf]
DT[.("F", 1:3), on=.(ID, t), roll = -Inf]
DT[.("F", 1:3), on=.(ID, t), roll = -Inf]
DT
`browseVignettes(package="data.table")
browseVignettes(package="data.table")
devtools::install_github("rstudio/rmarkdown")
library(data.table)
a = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), t = c(1L, 2L, 1L, 2L, NA_integer_), x = 11:15)
a
b = data.table(id = 1:2, y = -(1:2))
b
a[b, on=.(id)]
a[b, on=.(x = y)]
a = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), t = c(1L, 2L, 1L, 2L, NA_integer_), x = 11:15)
a
b = data.table(id = 1:2, y = c(11L, 15L))
b
a = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), t = c(1L, 2L, 1L, 2L, NA_integer_), x = 11:15)
a
b = data.table(id = 1:2, y = c(11L, 15L))
b
a[b, on=.(id)]
a[b, on=.(x = y)]
a[b, on=.(id, x = y)]
a[b, on=.(id)]
a[b, on=.(id), lapply(.SD, sum), by=.EACHI, .SDcols = c("x", "y")]
a[b, on=.(id), sum(), by=.EACHI]
a[b, on=.(id), sumy, by=.EACHI]
a[b, on=.(id), sum(y), by=.EACHI]
a[b, on=.(id), sum(x), by=.EACHI]
a[b, on=.(id), .(sum(x), sum(y)), by=.EACHI]
a[b, on=.(id)]
y
a[b, on=.(id), .(sum(x), sum(i.y)), by=.EACHI]
a[b, on=.(id), .(sum(x.x), sum(i.y)), by=.EACHI]
a[b, on=.(id), dput(y), by=.EACHI]
sessionInfo()
library(data.table)
a = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), t = c(1L, 2L, 1L, 2L, NA_integer_), x = 11:15)
a
b = data.table(id = 1:2, y = c(11L, 15L))
b
b[, sumx :=
a[b, on=.(id), .(sum(x), sum(y)), by=.EACHI]
]
a[b, on=.(id), .(sum(x), sum(y)), by=.EACHI]
b[, sumx :=
a[b, on=.(id), sum(x), by=.EACHI]$V1
]
b
b[, sumx :=
a[b, on=.(id), sum(x), by=.EACHI]$V1
]
b
a
b[, sumx :=
a[.SD, on=.(id), sum(x), by=.EACHI]$V1
]
b
a[b, on=.(id), y := i.y ]
a
b[a, on=.(id)]
b[a, on=.(id), x, by=.EACHI]
b[a, on=.(id), x := i.x, by=.EACHI]
b
a
b
DT = data.table(id = c(1L, 1L, 2L), year = c(1999L, 2000L, 1999L), v = c(5, 7, 9))
DT
a
b
a[CJ(id = id, t = t, unique=TRUE), on=.(id, t)]
a
a
a = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), t = c(1L, 2L, 1L, 2L, NA_integer_), x = 11:15)
a
b = data.table(id = 1:2, y = c(11L, 15L))
b
a
b
a
a
a[.(1L), on=.(id)]
# or, as a function
ra <- function(my_id) a[.(my_id), on=.(id)]
ra(1L)
ra(2L)
setDT(list(1L))
a[setDT(list(1L)), on=.(id)]
a[unname(setDT(list(1L))), on=.(id)]
a[data.table(1L), on=.(id)]
a
a
b
a[.(8:12), on=.(x)]
a[.(8:12), on=.(x), roll="nearest"]
a[.(c(10.5, 11.5, 12.5)), on=.(x), roll="nearest"]
a[.(c(10.5, 11.5, 12.5)), on=.(x), roll="nearest", verbose=TRUE]
a[.(c(5L, 10L, 15L, 20L)), on=.(x), roll="nearest"]
a[.(c(5L, 10L, 15L, 20L)), on=.(x)]
a[.(c(5L, 10L, 15L, 20L)), on=.(x)]
a[.(c(5L, 10L, 15L, 20L)), on=.(x), roll=-3]
a[.(c(5L, 10L, 15L, 20L)), on=.(x), roll=-3]
a[.(c(5L, 10L, 15L, 20L)), on=.(x), roll="nearest"]
a[.(c(5L, 10L, 15L, 20L)), on=.(x), roll="nearest"]
a[.(c(5L, 10L, 15L, 20L)), on=.(x), .(i.x, x.x), roll="nearest"]
a[.(c(5L, 10L, 15L, 20L)), on=.(x), .(i.x, x.x), roll="nearest"]
a[.(x = c(5L, 10L, 15L, 20L)), on=.(x), .(i.x, x.x), roll="nearest"]
myxDT = list(myx = c(5L, 10L, 15L, 20L))
# no exact matches
a[myxDT, on=.(x = myx), .(i.myx, x.x)]
a[myxDT, on=.(x = myx), .(i.myx, x.x), roll="nearest"]
a[myxDT, on=.(x = myx), .(i.myx, x.x), roll="nearest"]
a[myxDT, on=.(x = myx), .(i.myx, x.x)]
a[myxDT, on=.(x = myx), .(i.myx, x.x)]
a[myxDT, on=.(x = myx), roll="nearest", .(i.myx,
x.x)]
# exact match (equi-join)
a[myxDT, on=.(x = myx), .(i.myx, x.x)]
# nearest match
a[myxDT, on=.(x = myx), roll="nearest", .(i.myx, x.x)]
# upward match within 3
a[myxDT, on=.(x = myx), roll=-3, .(i.myx, x.x)]
mDT = .(id = 1:3, x_dn = 11:13, x_up = 18:20)
a[mDT, on=.(id, x >= x_dn, x <= x_up)]
mDT = data.table(id = 1:3, x_dn = 11:13, x_up = 18:20)
a[mDT, on=.(id, x >= x_dn, x <= x_up)]
mDT = data.table(id = 1:3, x_dn = 11:13, x_up = 18:20)
a[mDT, on=.(id, x >= x_dn, x <= x_up)]
a[mDT, on=.(id, x >= x_dn, x <= x_up), .(t, i.x_dn, i.x_up, x.x)]
a[mDT, on=.(id, x >= x_dn, x <= x_up), .(id, i.x_dn, i.x_up, x.x)]
a
a[mDT, on=.(id, x >= x_dn, x <= x_up), .(id, i.x_dn, i.x_up, x.x)]
a
mDT = data.table(id = 1:3, x_dn = 10L, x_up = c(13L, 12L, 11L))
a[mDT, on=.(id, x >= x_dn, x <= x_up), .(id, i.x_dn, i.x_up, x.x)]
mDT = data.table(id = 1:3, x_dn = 10L, x_up = c(13L, 12L, 11L))
a[mDT, on=.(id, x >= x_dn, x <= x_up), .(id, i.x_dn, i.x_up, x.x)]
a
a
mDT = data.table(id = 1:3, x_dn = 10L, x_up = c(11L, 15L, 12L))
a[mDT, on=.(id, x >= x_dn, x <= x_up), .(id, i.x_dn, i.x_up, x.x)]
mDT = data.table(id = 1:3, x_dn = 10L, x_up = c(11L, 15L, 12L))
a[mDT, on=.(id, x >= x_dn, x <= x_up), .(id, i.x_dn, i.x_up, x.x)]
mDT = data.table(id = 1:3, x_dn = 10L, x_up = 13L)
a[mDT, on=.(id, x >= x_dn, x <= x_up), .(id, i.x_dn, i.x_up, x.x)]
charDT = data.table(ch = c("A", "A", "B"), V = c(1, 4, 7))
charDT["A", on=.(ch)]
# instead of
charDT[.("A"), on=.(ch)]
charDT = data.table(ch = c("A", "A", "B"), V = c(1, 4, 7))
charDT["A", on=.(ch)]
# instead of
charDT[.("A"), on=.(ch)]
.
DT = data.table(A=1:2, B=3:4)
setkey(DT)
DT[.(B = 3, A = 1)]
DT[.(B = 3, A = 1), nomatch=0]
DT = data.table(ch = c("A", "A", "B"), u = 1:3, v = c(1, 4, 7))
DT["A", on=.(ch)]
# instead of
DT[.("A"), on=.(ch)]
DT = data.table(id = c("A", "A", "B"), u = c(0, 1, 2), v = c(1, 4, 7))
DT["A", on=.(id)]
# instead of
DT[.("A"), on=.(id)]
setkey(DT, id)
DT["A"]
DT = data.table(id = c("A", "A", "B"), u = c(0, 1, 2), v = c(1, 4, 7))
DT["A", on=.(id)]
# instead of
DT[.("A"), on=.(id)]
setkey(DT, id)
DT["A"]
setkey(DT, id)
DT["A"]
setkey(DT, u, v)
DT[.(v = 7, u = 2)]
setkey(DT, u, v)
DT[.(v = 7, u = 2)]
setindex(DT, id, u)
setindex(DT, id, v)
str(DT)
setindex(DT, id, u)
setindex(DT, id, v)
str(DT)
key(DT)
indices(DT)
str(DT)
indices(DT)
setindex(DT, id, u)
setindex(DT, id, v)
key(DT)
indices(DT)
str(DT)
setindex(DT, id, u)
setindex(DT, id, v)
key(DT)
indices(DT)
str(DT)
str(DT)
indices(DT)
indices(DT)
args(indices)
key(DT)
indices(DT, vectors=TRUE)
str(DT)
setindex(DT, id, u)
setindex(DT, id, v)
key(DT)
indices(DT, vectors=TRUE)
str(DT)
a
b
a
a[!b, on=.(id)]
a[-b, on=.(id)]
nms = c("a", "b")
c(nms[1] = 1, nms[2] = 2) # error
setNames(c(1, 2), nms)
DT = data.table(dt = "2017-01-01 01:11")
DT[, IDateTime(dt)]
as.ITime("01:11")
DT = data.table(dt = "2017-01-01 01:11:00")
DT[, IDateTime(dt)]
DT[, IDateTime(as.factor(dt))]
DT[, IDateTime(as.factor(dt))]
DT = data.table(dt = "2017-01-01 01:11")
DT[, IDateTime(as.factor(dt))]
DT = data.table(dt = "2017-01-01 01:11")
DT[, c("d", "t") := IDateTime(as.factor(dt))]
DT = data.table(dt = "2017-01-01 01:11")
DT[, c("d", "t") := IDateTime(as.factor(dt))][]
DT = data.table(x = c("A001ABC", "B001DEF"))
DT[, `:=`(x_id = substring(x, 1, 1), x_num = substring(x, 2, 4), x_val = substring(x, 5, 7))]
DT = data.table(x = c("A001ABC", "B001DEF"))
DT[, `:=`(x_id = substring(x, 1, 1), x_num = substring(x, 2, 4), x_val = substring(x, 5, 7))]
DT
?stringi
DT = data.table(v = c(, "Yes", "No", "Yep", "Nope", "argle", "bargle", "garble", "blargh"))
# desired mapping
v_translateDT = rbind(
data.table(v_old = c("Yes", "Yep"), v_new = TRUE),
data.table(v_old = c("No", "Nope"), v_new = TRUE)
)
# update join
DT[v_translateDT, on=.(v = v_old), vt := i.v_new ]
DT = data.table(v = c(, "Yes", "No", "Yep", "Nope", "argle", "bargle", "garble", "blargh"))
# desired mapping
v_translateDT = rbind(
data.table(v_old = c("Yes", "Yep"), v_new = TRUE),
data.table(v_old = c("No", "Nope"), v_new = TRUE)
)
# update join
DT[v_translateDT, on=.(v = v_old), vt := i.v_new ]
DT = data.table(v = c("Yes", "No", "Yep", "Nope", "argle", "bargle", "garble", "blargh"))
# desired mapping
v_translateDT = rbind(
data.table(v_old = c("Yes", "Yep"), v_new = TRUE),
data.table(v_old = c("No", "Nope"), v_new = TRUE)
)
# update join
DT[v_translateDT, on=.(v = v_old), vt := i.v_new ]
DT
# example data
DT = data.table(v = c("Yes", "argle", "bargle", "No", "Yep", "garble", "Nope", "blargh"))
# desired mapping
v_translateDT = rbind(
data.table(v_old = c("Yes", "Yep"), v_new = TRUE),
data.table(v_old = c("No", "Nope"), v_new = TRUE)
)
# update join
DT[v_translateDT, on=.(v = v_old), vt := i.v_new ]
DT
airDT = data.table(airquality)
library(data.table)
summary(airDT)
airDT = data.table(airquality)
summary(airDT)
summary(carbDT)
?CO2
summary(airDT)
summary(carbDT)
summary(airDT)
summary(carbDT)
airDT  = data.table(airquality)
carbDT = data.table(CO2)
summary(airDT)
summary(carbDT)
carbDT[, .N, by=Plant]
# or
carbDT[, table(Plant, useNA = "always")]
carbDT[, table(Plant, useNA = "always")]
eurodist
airDT
carbDT
str(carbDT)
mtcars
airDT
airDT  = data.table(airquality)
carsDT
carsDT
carsDT = data.table(mtcars, keep.rownames = TRUE)
carsDT
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
am := i.new_am ]
carsDT[.(old_vs = c(0, 1), new_vs = c("v", "straight")), on=.(vs = old_vs),
vs := i.new_vs ]
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
am := i.new_am ]
carsDT[.(old_vs = c(0, 1), new_vs = c("v", "straight")), on=.(vs = old_vs),
vs := i.new_vs ]
carsDT
str(carsDT)
carsDT = data.table(mtcars, keep.rownames = TRUE)
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am)]
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
am := i.new_am ]
carsDT[.(old_vs = c(0, 1), new_vs = c("v", "straight")), on=.(vs = old_vs),
vs := i.new_vs ]
carsDT = data.table(mtcars, keep.rownames = TRUE)
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
am := i.new_am, by=.EACHI ]
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
new_am := i.new_am, by=.EACHI ][
`:=`(am = new_am, new_am = NULL)]
carsDT = data.table(mtcars, keep.rownames = TRUE)
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
new_am := i.new_am ][
`:=`(am = new_am, new_am = NULL)]
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
new_am := i.new_am ]
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
new_am := i.new_am ] -> z
z
z
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
new_am := i.new_am ][,
`:=`(am = new_am, new_am = NULL)]
carsDT[.(old_vs = c(0, 1), new_vs = c("v", "straight")), on=.(vs = old_vs),
vs := i.new_vs ][,
`:=`(vs = new_vs, new_vs = NULL)]
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
`:=`(new_am = i.new_am, am = NULL) ]
setnames(carsDT, "new_am", "am")
carsDT[.(old_vs = c(0, 1), new_vs = c("v", "straight")), on=.(vs = old_vs),
`:=`(new_vs = i.new_vs, am = NULL) ]
setnames(carsDT, "new_vs", "vs")
summary(airDT)
summary(carsDT)
summary(data.table(a = c(NA, "A")))
carsDT[, table(am)]
carsDT[, .N, by=am]
`carsDT[, .N, by=av][order(-N)][1:3]
carsDT[, .N, by=av][order(-N)][1:3]
carsDT[, .N, by=am][order(-N)][1:3]
?cut
carsDT
carsDT[, cut(drat, 4)]
carsDT[, .N, by=cut(drat, 4)]
carsDT[, .N, by=.(drat_bin = cut(drat, 4))]
carsDT[, .N, by=.(drat_bin = cut(drat, 4))]
# or
carsDT[, drat %>% cut(4) %>% table ]
library(magrittr)
carsDT[, drat %>% cut(4) %>% table %>% plot ]
carsDT[, drat %>% hist(4) ]
args(hist)
?hist
carsDT[, drat %>% hist(3) ]
carsDT[, drat %>% cut(4) %>% table %>% plot ]
carsDT[, drat %>% hist(3) ]
carsDT[, drat %>% hist(4) ]
carsDT[, drat %>% cut(4) %>% table %>% plot ]
carsDT[, plot(table(cut(drat,4))) ]
carsDT[, drat %>% cut(4) %>% table %>% plot ]
carsDT[, hist(drat, 4) ]
lpoly
carsDT[, density(drat)]
carsDT[, density(drat) %>% plot ]
carsDT[, drat %>% density %>% plot ]
carsDT[, drat %>% boxplot ]
carsDT[, quantile(c(.1,.9)) %>% as.list, by=am]
# single-valued functions
carsDT[, mean(drat), by=am]
# multi-valued functions
carsDT[, quantile(drat, c(.1,.9)) %>% as.list, by=am]
carsDT[, quantile(drat, c(.1, .25, .75, .9)) %>% as.list, by=am]
carsDT[, c(
.(mean = mean(drat)),
quantile(drat, c(.1, .25, .75, .9)) %>% as.list
), by=am]
var(carsDT)
is.numeric(1L)
carsDT[, var(.SD), .SDcols = sapply(carsDT, is.numeric)]
sapply(carsDT, is.numeric)
str(carsDT)
carsDT = data.table(mtcars, keep.rownames = TRUE)
carsDT[.(old_vs = c(0, 1), new_vs = c("v", "straight")), on=.(vs = old_vs),
new_vs := i.new_vs ]
carsDT
carsDT[, vs := NULL ]            # drop old column
setnames(carsDT, "new_vs", "vs") # rename new column
carsDT
carsDT[, var(.SD), .SDcols = sapply(carsDT, is.numeric)]
carsDT[, .N, by=.(am, vs, drat_bin = cut(drat, 4))]
carsDT[, table(am, vs, drat_bin = cut(drat, 4))]
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
new_am := i.new_am ]           # grab new column
carsDT[, am := NULL ]            # drop old column
setnames(carsDT, "new_am", "am") # rename new column
carsDT[, table(am, vs, drat_bin = cut(drat, 4))]
airDT[, {
hexbin::hexbin(Wind, Temp) %>% plot
NULL
}]
airDT[, {
(hexbin::hexbin(Wind, Temp)) %>% plot
NULL
}]
airDT[, {
hexbin::hexbin(Wind, Temp) %>% plot
NULL
}]
library(hexbin)
airDT[, {
hexbin::hexbin(Wind, Temp) %>% plot
NULL
}]
airDT[, .(Wind, Temp) %>% do.call(plot, .)]
airDT[,  do.call(plot, .(Wind, Temp))]
airDT[,  plot(Wind, Temp)]
airDT[, {
hexbin::hexbin(Wind, Temp) %>% plot
NULL
}]
with(airDT, hexbin::hexbin(Wind, Temp) %>% plot)
airDT[, hexbin::hexbin(Wind, Temp)] %>% plot
carsDT[, cor(.SD), .SDcols = sapply(carsDT, is.numeric)]
library(corrplot)
library('corrplot')
carsDT[, cor(.SD) %>% corrplot::corrplot, .SDcols = sapply(carsDT, is.numeric)]
?curve
curve(x^2, add = TRUE)
curve(3x^2, add = TRUE)
airDT[,  plot(Wind, Temp)]
curve(3x^2, add = TRUE)
curve(3*x^2, add = TRUE)
curve(x^2, add = TRUE)
curve(x/2, add = TRUE)
curve(x*20, add = TRUE)
curve(x*10, add = TRUE)
curve(x*30, add = TRUE)
curve(x*4, add = TRUE)
curve(10 + x*4, add = TRUE)
curve(40 + x*4, add = TRUE)
curve(100 - 3*x, add = TRUE)
base::polyroot()
plot
plot.default
graphics::plot(1,1)
x11()
plot(1,1)
airDT[, qqplot(Wind, Temp)]
airDT[, {qqplot(Wind, Temp); abline(slope=1)}]
args(abline)
args(abline)
airDT[, {qqplot(Wind, Temp); abline(b=1)}]
airDT[, {qqplot(Wind, Temp); abline(a=min(Tem), b=diff(range(Temp))/diff(range(Wind)))}]
airDT[, {qqplot(Wind, Temp); abline(a=min(Temp), b=diff(range(Temp))/diff(range(Wind)))}]
airDT[, min(Temp)]
?qqplot
airDT[, qqplot(Wind, Temp)]
airDT[, .(Wind, Temp)]
sort(airDT[, .(Wind, Temp)])
setorder(airDT[, .(Wind, Temp)])[]
airDT[, qqplot(Wind, Temp)]
?qqplot
carsDT[, drat %>% cut(4) %>% table %>% plot ]
sessionInfo()
