?bookdown::build_chapter
b[a, on="id", .N, by=.EACHI]
a = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), x = 11:15)
a
b = data.table(id = 1:2, y = -(1:2))
b
b[a, on="id", .N, by=.EACHI]
a[b, on="id", .N, by=.EACHI]
a
b
b[!a, on=.(id)]
a[!b, on=.(id)]
a[!b, on=.(id)]
fsetdiff(a, b)
fsetdiff(a, b)
x
x
a[!b, on=.(id)]
b
b
str(b)
str(b)
a[b, on=.(id), y := i.y ]
warnings()
a[b, on=.(id), y := i.y ]
a[b, on=.(id)]
a
b[]
b[]
b[a, on=.(id)]
b[a, on=.(id), x := i.x ][]
b[a, on=.(id), x := i.x ][]
b[a, on=.(id), x := i.x, verbose = TRUE TRUE][]
b[a, on=.(id), x := i.x, verbose = TRUE][]
b[a, on=.(id), x := i.x, verbose = TRUE, by=.EACHI][]
b[a, on=.(id), x := if (.N==1L) i.x else stop(do.call(paste, c("Bad:", .BY))), verbose = TRUE][]
b[a, on=.(id), x := if (.N==1L) i.x else stop(do.call(paste, c(.("Bad:"), .BY))), verbose = TRUE][]
b[a, on=.(id), x := if (.N==1L) i.x else stop(do.call(paste, c("Bad:", .BY))), by=.EACHI, verbose = TRUE][]
b[a, on=.(id), x := if (.N==1L) i.x else stop(do.call(paste, c("Bad:", .BY))), by=.EACHI, verbose = TRUE][]
b[a, on=.(id), .N, by=.EACHI, verbose = TRUE][]
a[b, on=.(id), .N, by=.EACHI][, range(.N)]
a[b, on=.(id), .N, by=.EACHI]
a[b, on=.(id), .N, by=.EACHI][, range(N)]
1
library(data.table)
a <- data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), x = 11:15)
b <- data.table(id = 1:2, y = -(1:2))
b[a, on=.(id), x := i.x, verbose = TRUE][]
# Calculated ad hoc index in 0 secs
# Starting bmerge ...done in 0 secs
# Detected that j uses these columns: x,i.x
# Assigning to 3 row subset of 2 rows
?.Last.value
1
personDT = data.table(id = 1:2, name = LETTERS[1:2])
placeDT = data.table(id = 1:2, name = state.abb[1:2])
personDT
placeDT
perDT = data.table(id = 1:2, name = LETTERS[1:2])
locDT = data.table(id = 1:2, name = state.abb[1:2])
psnDT = data.table(id = 1:2, name = LETTERS[1:2])
locDT = data.table(id = 1:2, name = state.abb[1:2])
psnDT[locDT, on=.()]
psnDT[, .cjid := NA ]
locDT[, .cjid := NA ]
visitDT = psnDT[locDT, on=.(.cjid)]
psnDT[locDT, on=.(.cjid)]
visitDT = psnDT[locDT, on=.(.cjid), !"cjid"]
visitDT
visitDT = psnDT[locDT, on=.(.cjid), !".cjid"]
visitDT
visitDT = psnDT[locDT, on=.(.cjid)][, !".cjid"]
visitDT
psnDT[, .cjid := NA ]
locDT[, .cjid := NA ]
visitDT = psnDT[locDT, on=.(.cjid)][, .cjid := NULL ]
visitDT
psnDT[, .cjid := NULL ] # cleanup
locDT[, .cjid := NULL ]
visitDT
psnDT[, .cjid := NA ]
locDT[, .cjid := NA ]
visitDT = psnDT[locDT, on=.(.cjid)][, .cjid := NULL ][]
psnDT[, .cjid := NULL ] # cleanup
locDT[, .cjid := NULL ]
psnDT[, .cjid := NA ]
locDT[, .cjid := NA ]
visitDT = psnDT[locDT, on=.(.cjid)][, .cjid := NULL ][]
psnDT[, .cjid := NULL ] # cleanup
locDT[, .cjid := NULL ]
visitDT = psnDT[locDT, on=.(.cjid)][, .cjid := NULL ][]
psnDT[, .cjid := NA ]
locDT[, .cjid := NA ]
visitDT = psnDT[locDT, on=.(.cjid)][, .cjid := NULL ][]
visitDT
psnDT[, .cjid := NA ]
locDT[, .cjid := NA ]
visitDT = psnDT[locDT, on=.(.cjid),
.(psn_id = x.id, loc_id = i.id, psn_name = x.id, loc_name = i.id)]
visitDT
x = c(1,1,1,2,2)
with(rle(x), lengths)
diag(4)
diag(3)[1:2,]
diag(diag(3)[1:2,])
replace(numeric(5), 3, 1)
?head.data.frame
head
methods("head", class(1))
methods("head", class(data.table(1)))
library(data.table)
library(data.table)
methods("head", class(data.table(1)))
?rle
f = function(x) x
c(LETTERS, letters)
# example data
x = c(TRUE, FALSE, TRUE)
x
# [1]  TRUE FALSE  TRUE
length(x)
# [1] 3
class(x)
# [1] "logical"
help.start()
T
array()
args(array)
args(matrix)
array
upper.tri
devtools::install_github("rstudio/rmarkdown")
a = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), x = 11:15)
library(data.table)
a = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), x = 11:15)
a
b = data.table(id = 1:2, y = -(1:2))
b
a
b
a = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), t = c(1L, 2L, 1L, 2L, NA_integer_) x = 11:15)
a = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), t = c(1L, 2L, 1L, 2L, NA_integer_), x = 11:15)
a
DT = data.table(id = rep(1:2, 3), t = c(1L, 5L, 12L, 3L, 4L, 15L))
DT = data.table(id = rep(1:2, 3), t = c(1L, 5L, 12L, 3L, 4L, 15L))
DT[.(id = id, t0 = t - 7, t1 = t), on=.(id, t >= t0, t < t1), .N, by=.EACHI]
warnings()
DT[.(id = id, t0 = t - 7, t1 = t), on=.(id, t >= t0, t < t1), .N, by=.EACHI]
DT = data.table(id = rep(1:2, 3), t = c(1L, 5L, 12L, 3L, 4L, 15L))
DT[.(id = id, t0 = t - 7, t1 = t), on=.(id, t >= t0, t < t1), .N, by=.EACHI]
DT = data.table(id = rep(1:2, each = 3), t = c(1L, 5L, 12L, 3L, 4L, 15L))
DT[.(id = id, t0 = t - 7, t1 = t), on=.(id, t >= t0, t < t1), .N, by=.EACHI]
warnings()
warnings()
warnings()
warnings()
DT = data.table(id = rep(1:2, each = 3), t = c(1L, 5L, 12L, 3L, 4L, 15L))
DT[.(id = id, t0 = t - 7, t1 = t), on=.(id, t >= t0, t < t1), .N, by=.EACHI]
DT = data.table(id = rep(1:2, each = 3), t = c(1L, 5L, 12L, 3L, 4L, 15L), v = 1:6)
DT[.(id = id, t0 = t - 7L, t1 = t), on=.(id, t >= t0), sum(v), by=.EACHI]
DT[.(id = id, t0 = t - 7L, t1 = t), on=.(id, t >= t0), v7 := sum(v), by=.EACHI]
DT
DT
DT
DT
DT
DT = data.table(id = rep(1:2, each = 3), t = c(1L, 5L, 12L, 3L, 4L, 15L), v = 1:6)
DT[.(id = id, t0 = t - 7L, t1 = t), on=.(id, t >= t0), v7 := sum(v), by=.EACHI][]
DT = data.table(id = rep(1:2, each = 3), t = c(1L, 5L, 12L, 3L, 4L, 15L), v = 1:6)
DT[.(id = id, t0 = t - 7L, t1 = t), on=.(id, t >= t0), v7 := sum(v), by=.EACHI][]
DT = data.table(id = rep(1:2, each = 3), t = c(1L, 5L, 12L, 3L, 4L, 15L), v = 1:6)
DT[.(id = id, t0 = t - 7L, t1 = t), on=.(id, t >= t0), v7 := sum(v), by=.EACHI][]
DT = data.table(id = rep(1:2, each = 3), t = c(1L, 5L, 12L, 3L, 4L, 15L), v = 1:6)
DT[.(id = id, t0 = t - 7L, t1 = t), on=.(id, t >= t0), v7 := sum(v), by=.EACHI][]
DT = data.table(id = rep(1:2, each = 3), t = c(1L, 5L, 12L, 3L, 4L, 15L), v = 1:6)
DT[.(id = id, t0 = t - 7L, t1 = t), on=.(id, t >= t0, t < t1), v7 := sum(v), by=.EACHI][]
DT = data.table(id = rep(1:2, each = 3), t = c(1L, 5L, 12L, 3L, 4L, 15L), v = 1:6)
DT[.(id = id, t0 = t - 7L, t1 = t), on=.(id, t >= t0, t < t1), v7 := sum(v), by=.EACHI][]
DT[id ==2 & between(t, -2,4)]
DT
DT[id ==2 & between(t, -2,4), sum(v)]
DT = data.table(id = rep(1:2, each = 3), t = c(1L, 5L, 12L, 3L, 4L, 15L), v = 1:6)
DT[.(id = id, t0 = t - 7L, t1 = t), on=.(id, t >= t0, t < t1), v7 := sum(v), by=.EACHI][]
DT = data.table(
id = c(1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L, 6L),
t  = c(18L, 19L, 13L, 18L, 14L, 16L, 16L, 19L, 4L, 4L, 4L, 18L, 3L, 4L, 13L, 12L, 16L, 4L)
)
DT
DT[.(id = id, t0 = t - 7L, t1 = t), on=.(id, t >= t0, t < t1),
v7 := sum(v)
, by=.EACHI][]
DT[.(t0 = tg - 3, t1 = tg), on=.(t > t0, t < t1),
uniqueN(id, na.rm = TRUE)
, by=.EACHI]
tg = DT[, seq.int(min(t), max(t))]
DT[.(t0 = tg - 3, t1 = tg), on=.(t > t0, t < t1),
uniqueN(id, na.rm = TRUE)
, by=.EACHI]
DT = data.table(
id = c(1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L, 6L),
t  = c(18L, 19L, 13L, 18L, 14L, 16L, 16L, 19L, 4L, 4L, 4L, 18L, 3L, 4L, 13L, 12L, 16L, 4L)
)
DT
# identify range of dates of interest
tg = DT[, seq.int(min(t), max(t))]
DT[.(t0 = tg - 3, t1 = tg), on=.(t > t0, t < t1),
uniqueN(id, na.rm = TRUE)
, by=.EACHI]
DT[.(t0 = tg - 3, t1 = tg), on=.(t > t0, t < t1),
uniqueN(id, na.rm = TRUE)
, by=.EACHI][, setnames(.SD, c("t0", "t", "n"))]
[, setnames(.SD, c("t0", "t", "n"))]
DT[.(t0 = tg - 3, t1 = tg), on=.(t > t0, t < t1),
uniqueN(id, na.rm = TRUE)
, by=.EACHI][, setnames(.SD, c("t0", "t", "n"))]
DT = data.table(
id = c(5L, 6L, 2L, 3L, 3L, 2L, 4L),
t = c(4L, 16L, 16L, 16L, 4L, 14L, 4L)
)
DT
# identify range of dates of interest
tg = DT[, seq.int(min(t), max(t))]
DT[.(t0 = tg - 3, t1 = tg), on=.(t > t0, t < t1),
uniqueN(id, na.rm = TRUE)
, by=.EACHI]
DT
id = c(5L, 6L, 2L, 3L, 3L, 2L, 4L), t = c(4L,
16L, 16L, 16L, 4L, 14L, 4L)
DT = data.table(
id = c(5L, 6L, 2L, 3L, 3L, 2L, 4L),
t = c(4L, 16L, 16L, 16L, 4L, 14L, 4L)
)
DT
# identify range of dates of interest
tg = DT[, seq.int(min(t), max(t))]
DT[.(t0 = tg - 3, t1 = tg), on=.(t > t0, t < t1),
uniqueN(id, na.rm = TRUE)
, by=.EACHI]
DT = data.table(
id = c(3L, 2L, 4L, 6L, 1L, 6L, 6L),
t = c(13L, 11L, 1L, 13L, 16L, 9L, 1L)
)
DT
# identify range of dates of interest
tg = DT[, seq.int(min(t), max(t))]
DT[.(t0 = tg - 3, t1 = tg), on=.(t > t0, t < t1),
uniqueN(id, na.rm = TRUE)
, by=.EACHI]
warnings()
DT = data.table(
x = letters[c(1, 2, 3, 4, 5)],
y = c(1, 2, 3, 4, 5),
z = c(1, 2, 3, 4, 5) > 3
)
DT
DT[, u := 5:1][]
# creating multiple
DT[, `:=`(v = 2, w = 3L)][]
# creating with dynamic names
nms = c("a", "b", "c")
DT[, (nms) := .(1, 2, 3)][]
DT = data.table(
ID = c("D", "F", "F", "B", "C", "F", "A"),
t = c(1L, 1L, 9L, 11L, 13L, 13L, 16L)
)
setkey(DT, ID, t)
DT[.("F", 10)]
DT[.("F", 13)]
DT[.("F", 1:3), on=.(ID, t)]
DT[.("F", 1:3), on=.(ID, t), roll = Inf]
DT[.("F", 1:3), on=.(ID, t), roll = -Inf]
DT[.("F", 1:3), on=.(ID, t), roll = -Inf]
DT[.("F", 1:3), on=.(ID, t), roll = -Inf]
DT
`browseVignettes(package="data.table")
browseVignettes(package="data.table")
devtools::install_github("rstudio/rmarkdown")
carDT = data.table(mtcars, keep.rownames = TRUE)
library(data.table)
carDT = data.table(mtcars, keep.rownames = TRUE)
carDT
carDT = data.table(mtcars, keep.rownames = TRUE)
carDT[, mean(hp), by=.(am, vs)]
carDT = data.table(mtcars, keep.rownames = TRUE)
carDT[, .(mean_hp = mean(hp)), by=.(am, vs)]
carsDT %>% View
library(magrittr)
carsDT %>% View
carsDT = data.table(mtcars, keep.rownames = TRUE)
carsDT %>% View
carsDT %>% base::View
getAnywhere(View)
carsDT %>% utils::View # behaves differently if you're in RStudio
carsDT %>% utils::View
carsDT %>% `utils::View` # behaves differently if you're in RStudio
utils::View
utils::View(carsDT)
carsDT %>% `utils::View`
`utils::View`
utils::`View``
utils::`View`
carsDT %>% utils::`View`
mtcars %>% utils::View
carsDT %>% utils::View()
carsDT
flights
nycflights13::flights
mtcars
mtcars[1:2, c("mpg", "cyl")]
?cedta
library(data.table)
?cedta
?CEDTA
?set
?setorder
quakeDT = data.table(quakes)
quakeDT
quakeDT
quakeDT %>% head(10) %>% View
library(magrittr)
quakeDT %>% head(10) %>% View
quakeDT %>% str
DT = data.table(
x = letters[c(1, 2, 3, 4, 5)],
y = c(1, 2, 3, 4, 5),
z = c(1, 2, 3, 4, 5) > 3
)
DT
DT[1:2, ]
DT[1:2, "z"]
DT[, "z"]
DT[1:2, ]
DT[, "z"]
DT[-3, c("y", "z")]
DT[1:2, ]
DT[, "z"]
DT[-3, c("y", "z")]
DT = data.table(
x = letters[c(1, 2, 3, 4, 5)],
y = c(1, 2, 3, 4, 5),
z = c(1, 2, 3, 4, 5) > 3
)
DT[1:2, ]
DT[, "z"]
DT[-3, c("y", "z")]
DT[1:2]
DT[1:2]
DT = data.table(
x = letters[c(1, 2, 3, 4, 5)],
y = c(1, 2, 3, 4, 5),
z = c(1, 2, 3, 4, 5) > 3
)
DT[1:2, ]
DT[, "z"]
DT[-3, c("y", "z")]
DT
DT
DT[1:2]
DT[1:2]
drop = c(TRUE, FALSE, FALSE, FALSE, FALSE)
DT[!drop]
DT = data.table(
x = letters[c(1, 2, 3, 4, 5)],
y = c(1, 2, 3, 4, 5),
z = c(1, 2, 3, 4, 5) > 3
)
drop = c(TRUE, FALSE, FALSE, FALSE, FALSE)
DT[!drop]
DT[!z]
keep_cols = c("y", "z")
DT[, keep_cols]
head(DT, -3)    # top, subtracting last 3
tail(DT, 2)     # bottom 2
DT[0L]          # empty
DT[NA_integer_] # missing
quakeDT = data.table(quakes)
quakeDT = data.table(quakes)
DT
DT
DT[x > "b", .(sum(y > 2), sum(y <= 2)), by=z]
DT[x > "b", .(sum(y > 2), sum(y <= 2)), by=z]
DT[x > "b", .(n_bigy = sum(y > 2), n_smally = sum(y <= 2)), by=z]
DT[x > "b", .(sum(y > 2), sum(y <= 2)), by=z]
DT[x > "b", .(n_bigy = sum(y > 2), n_smally = sum(y <= 2)), by=z]
DT[!z]
DT[z]
DT[z]
DT[!(z)]
DT[!(z)]DT[!(z)]
DT[!(z)]
DT[(z)]
?MASS::birtwt
DT = data.table(col = c("A","A","B"), A = 1:3, B = -1:1)
library(data.table)
DT = data.table(col = c("A","A","B"), A = 1:3, B = -1:1)
DT
DT[, DT[, ..col], by=1:nrow(DT)]
DT[, DT[, col, with=FALSE], by=1:nrow(DT)]
DT[, .SD[, ..col], by=1:nrow(DT)]
DT[, .(v = .SD[, ..col]), by=1:nrow(DT)]
DT[, .(v = .SD[[..col]]), by=1:nrow(DT)]
DT[, .(v = .SD[[col]]), by=1:nrow(DT)]
badDT = data.table(col = c("A","A","B"), A = 1:3, B = -1:1)
badDT
badDT[, .SD[[col]], by=1:nrow(badDT)]
# take the max across columns
badDT[, max(.SD), by=1:nrow(badDT)]
badDT[, max(unlist(.SD), by=1:nrow(badDT)]
badDT[, max(unlist(.SD), by=1:nrow(badDT)]
badDT[, max(unlist(.SD)), by=1:nrow(badDT)]
badDT[, max(unlist(.SD)), by=1:nrow(badDT), .SDcols=c("A","B")]
badDT[, max(unlist(.SD)), by=1:nrow(badDT), .SDcols=c("A","B")]
badDT[, max(unlist(.SD)), by=1:nrow(badDT), .SDcols=c("A","B")]
badDT[, max(unlist(.SD)), by=1:nrow(badDT), .SDcols=c("A","B")]
badDT[, max(unlist(.SD)), by=1:nrow(badDT), .SDcols=c("A","B")]
badparDT = data.table(parent = c("A","A","B"), kid1 = c("a","b","c"), kid2 = c(NA, "d", "e"), kid3 = c(NA, "f", NA))
badparDT = data.table(parent = c("A","A","B"), kid1 = c("a","b","c"), kid2 = c(NA, "d", "e"), kid3 = c(NA, "f", NA))
badparDT
badparDT = data.table(parent = c("A1","A2","B1"), kid1 = c("a","a","b"), kid2 = c("d", "d", NA), kid3 = c("f", "f", NA))
badparDT = data.table(parent = c("A1","A2","B1"), kid1 = c("a","a","b"), kid2 = c("d", "d", NA), kid3 = c("f", "f", NA))
badparDT
?.SD
carsDT[, .(mean_hp = mean(hp), mean_wt = mean(wt), mean_disp = mean(disp)), by=.(am, vs)]
carsDT[, .(mean_hp = mean(hp), mean_wt = mean(wt), mean_disp = mean(disp)), by=.(am, vs)]
carsDT = data.table(mtcars, keep.rownames = TRUE)
carsDT[, .(mean_hp = mean(hp), mean_wt = mean(wt), mean_disp = mean(disp)), by=.(am, vs)]
carsDT[, .(mean_hp = mean(hp)), by=.(am, vs), verbose=TRUE]
carsDT[, .(mean_hp = mean(hp)), by=.(am, vs), verbose=TRUE]
carsDT[, class(.SD)]
parse(W1 = W1 <- u + y)
parse(W1 = W1 <- u + y)
parse(quote(W1 = W1 <- u + y))
parse(quote(W1 <- W1 <- u + y))
parse(text = "W1 = W1 <- u + y")
as.list(expression(W1 = W1 <- u + y))
unlist(expression(W1 = W1 <- u + y))
parse(expression(W1 = W1 <- u + y))
deparse(expression(W1 = W1 <- u + y))
DT
DT
DT[, a := 10L ][]
DT[, a := rep(32.5, .N), verbose=TRUE ][]
DT
DT
DT[, setorder(.SD, B)]
DT[, setorder(.SD, -B)]
DT
DT[, setorder(.SD, B)]
DT
DT[, setorder(.SD, B)][, d := 3]
DT
DT[b < Inf, d := 1]
DT[b < Inf, d := 1]
DT[b < Inf][, d := 2]
DT
vignette("datatable-reference-semantics")
vignette("datatable-reference-semantics")
DT
DT
DT = data.table(
x = letters[c(1, 2, 3, 4, 5)],
y = c(1, 2, 3, 4, 5),
z = c(1, 2, 3, 4, 5) > 3
)
DT
DT[     , b := "Aardvark"] # initialize to baseline value
DT[y > 1, b := "Zebra"][] # replace based on a condition
carsDT[, lapply(.SD, mean), by=.(am, vs), .SDcols = cols] %>% setnames(cols, sprintf("mean%s", cols))
cols = cols
carsDT[, lapply(.SD, mean), by=.(am, vs), .SDcols = cols] %>% setnames(cols, sprintf("mean%s", cols))
library(magrittr)
cols = c("hp", "wt", "disp")
carsDT[, lapply(.SD, mean), by=.(am, vs), .SDcols = cols] %>% setnames(cols, sprintf("mean%s", cols))
carsDT[, lapply(.SD, mean), by=.(am, vs), .SDcols = cols] %>% setnames(cols, sprintf("mean%s", cols)) %>% print
carsDT[, lapply(.SD, mean), by=.(am, vs), .SDcols = cols] %>% setnames(cols, sprintf("mean%s", cols)) %>% print
carsDT[, lapply(.SD, mean), by=.(am, vs), .SDcols = cols] %>% setnames(cols, sprintf("mean_%s", cols)) %>% print
?set
fDT = data.table(fac = factor("A", "B"), levels = c("A", "B", "C"))
levels(fDT$fac)
levels(fDT$fac)
levels(fDT$fac)
fDT$fac %>% setlevels(c("A", "B", "Q"))
levels(fDT$fac)
fDT
fDT$fac
fDT = data.table(fac = factor("A", "B", levels = c("A", "B", "C")))
levels(fDT$fac)
fDT$fac %>% setlevels(c("A", "B", "Q"))
levels(fDT$fac)
fDT = data.table(fac = factor(c("A", "B"), levels = c("A", "B", "C")))
fDT
levels(fDT$fac)
fDT$fac %>% setlevels(c("A", "B", "Q"))
levels(fDT$fac)
fDT[, setlevels(fac, c("A", "B", "Q")) ]
levels(fDT$fac)
fDT[, setlevels(fac, c("A", "B", "Q")) ]
levels(fDT$fac)
fDT[, setattr(fac, "levels", c("A", "B", "Q")) ]
levels(fDT$fac)
fDT = data.table(fac = factor(c("A", "B"), levels = c("A", "B", "C")))
fDT = data.table(fac = factor(c("A", "B"), levels = c("A", "B", "C")))
fDT$fac %>% setattr("levels", c("A", "B", "Q"))
levels(fDT$fac)
?attributes
fDT[, setattr(fac, "levels", c("A", "B", "Q")) ]
fDT[, setattr(fac, "levels", c("A", "B", "Q")) ]
fDT$fac %>% setattr("levels", c("A", "B", "Q"))
help.start()
??fortunes
sessionInfo()
?Methods
