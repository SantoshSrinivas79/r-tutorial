mDT = data.table(id = 1:3, x_dn = 10L, x_up = c(11L, 15L, 12L))
a[mDT, on=.(id, x >= x_dn, x <= x_up), .(id, i.x_dn, i.x_up, x.x)]
mDT = data.table(id = 1:3, x_dn = 10L, x_up = c(11L, 15L, 12L))
a[mDT, on=.(id, x >= x_dn, x <= x_up), .(id, i.x_dn, i.x_up, x.x)]
mDT = data.table(id = 1:3, x_dn = 10L, x_up = 13L)
a[mDT, on=.(id, x >= x_dn, x <= x_up), .(id, i.x_dn, i.x_up, x.x)]
charDT = data.table(ch = c("A", "A", "B"), V = c(1, 4, 7))
charDT["A", on=.(ch)]
# instead of
charDT[.("A"), on=.(ch)]
charDT = data.table(ch = c("A", "A", "B"), V = c(1, 4, 7))
charDT["A", on=.(ch)]
# instead of
charDT[.("A"), on=.(ch)]
.
DT = data.table(A=1:2, B=3:4)
setkey(DT)
DT[.(B = 3, A = 1)]
DT[.(B = 3, A = 1), nomatch=0]
DT = data.table(ch = c("A", "A", "B"), u = 1:3, v = c(1, 4, 7))
DT["A", on=.(ch)]
# instead of
DT[.("A"), on=.(ch)]
DT = data.table(id = c("A", "A", "B"), u = c(0, 1, 2), v = c(1, 4, 7))
DT["A", on=.(id)]
# instead of
DT[.("A"), on=.(id)]
setkey(DT, id)
DT["A"]
DT = data.table(id = c("A", "A", "B"), u = c(0, 1, 2), v = c(1, 4, 7))
DT["A", on=.(id)]
# instead of
DT[.("A"), on=.(id)]
setkey(DT, id)
DT["A"]
setkey(DT, id)
DT["A"]
setkey(DT, u, v)
DT[.(v = 7, u = 2)]
setkey(DT, u, v)
DT[.(v = 7, u = 2)]
setindex(DT, id, u)
setindex(DT, id, v)
str(DT)
setindex(DT, id, u)
setindex(DT, id, v)
str(DT)
key(DT)
indices(DT)
str(DT)
indices(DT)
setindex(DT, id, u)
setindex(DT, id, v)
key(DT)
indices(DT)
str(DT)
setindex(DT, id, u)
setindex(DT, id, v)
key(DT)
indices(DT)
str(DT)
str(DT)
indices(DT)
indices(DT)
args(indices)
key(DT)
indices(DT, vectors=TRUE)
str(DT)
setindex(DT, id, u)
setindex(DT, id, v)
key(DT)
indices(DT, vectors=TRUE)
str(DT)
a
b
a
a[!b, on=.(id)]
a[-b, on=.(id)]
nms = c("a", "b")
c(nms[1] = 1, nms[2] = 2) # error
setNames(c(1, 2), nms)
DT = data.table(dt = "2017-01-01 01:11")
DT[, IDateTime(dt)]
as.ITime("01:11")
DT = data.table(dt = "2017-01-01 01:11:00")
DT[, IDateTime(dt)]
DT[, IDateTime(as.factor(dt))]
DT[, IDateTime(as.factor(dt))]
DT = data.table(dt = "2017-01-01 01:11")
DT[, IDateTime(as.factor(dt))]
DT = data.table(dt = "2017-01-01 01:11")
DT[, c("d", "t") := IDateTime(as.factor(dt))]
DT = data.table(dt = "2017-01-01 01:11")
DT[, c("d", "t") := IDateTime(as.factor(dt))][]
DT = data.table(x = c("A001ABC", "B001DEF"))
DT[, `:=`(x_id = substring(x, 1, 1), x_num = substring(x, 2, 4), x_val = substring(x, 5, 7))]
DT = data.table(x = c("A001ABC", "B001DEF"))
DT[, `:=`(x_id = substring(x, 1, 1), x_num = substring(x, 2, 4), x_val = substring(x, 5, 7))]
DT
?stringi
DT = data.table(v = c(, "Yes", "No", "Yep", "Nope", "argle", "bargle", "garble", "blargh"))
# desired mapping
v_translateDT = rbind(
data.table(v_old = c("Yes", "Yep"), v_new = TRUE),
data.table(v_old = c("No", "Nope"), v_new = TRUE)
)
# update join
DT[v_translateDT, on=.(v = v_old), vt := i.v_new ]
DT = data.table(v = c(, "Yes", "No", "Yep", "Nope", "argle", "bargle", "garble", "blargh"))
# desired mapping
v_translateDT = rbind(
data.table(v_old = c("Yes", "Yep"), v_new = TRUE),
data.table(v_old = c("No", "Nope"), v_new = TRUE)
)
# update join
DT[v_translateDT, on=.(v = v_old), vt := i.v_new ]
DT = data.table(v = c("Yes", "No", "Yep", "Nope", "argle", "bargle", "garble", "blargh"))
# desired mapping
v_translateDT = rbind(
data.table(v_old = c("Yes", "Yep"), v_new = TRUE),
data.table(v_old = c("No", "Nope"), v_new = TRUE)
)
# update join
DT[v_translateDT, on=.(v = v_old), vt := i.v_new ]
DT
# example data
DT = data.table(v = c("Yes", "argle", "bargle", "No", "Yep", "garble", "Nope", "blargh"))
# desired mapping
v_translateDT = rbind(
data.table(v_old = c("Yes", "Yep"), v_new = TRUE),
data.table(v_old = c("No", "Nope"), v_new = TRUE)
)
# update join
DT[v_translateDT, on=.(v = v_old), vt := i.v_new ]
DT
airDT = data.table(airquality)
library(data.table)
summary(airDT)
airDT = data.table(airquality)
summary(airDT)
summary(carbDT)
?CO2
summary(airDT)
summary(carbDT)
summary(airDT)
summary(carbDT)
airDT  = data.table(airquality)
carbDT = data.table(CO2)
summary(airDT)
summary(carbDT)
carbDT[, .N, by=Plant]
# or
carbDT[, table(Plant, useNA = "always")]
carbDT[, table(Plant, useNA = "always")]
eurodist
airDT
carbDT
str(carbDT)
mtcars
airDT
airDT  = data.table(airquality)
carsDT
carsDT
carsDT = data.table(mtcars, keep.rownames = TRUE)
carsDT
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
am := i.new_am ]
carsDT[.(old_vs = c(0, 1), new_vs = c("v", "straight")), on=.(vs = old_vs),
vs := i.new_vs ]
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
am := i.new_am ]
carsDT[.(old_vs = c(0, 1), new_vs = c("v", "straight")), on=.(vs = old_vs),
vs := i.new_vs ]
carsDT
str(carsDT)
carsDT = data.table(mtcars, keep.rownames = TRUE)
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am)]
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
am := i.new_am ]
carsDT[.(old_vs = c(0, 1), new_vs = c("v", "straight")), on=.(vs = old_vs),
vs := i.new_vs ]
carsDT = data.table(mtcars, keep.rownames = TRUE)
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
am := i.new_am, by=.EACHI ]
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
new_am := i.new_am, by=.EACHI ][
`:=`(am = new_am, new_am = NULL)]
carsDT = data.table(mtcars, keep.rownames = TRUE)
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
new_am := i.new_am ][
`:=`(am = new_am, new_am = NULL)]
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
new_am := i.new_am ]
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
new_am := i.new_am ] -> z
z
z
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
new_am := i.new_am ][,
`:=`(am = new_am, new_am = NULL)]
carsDT[.(old_vs = c(0, 1), new_vs = c("v", "straight")), on=.(vs = old_vs),
vs := i.new_vs ][,
`:=`(vs = new_vs, new_vs = NULL)]
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
`:=`(new_am = i.new_am, am = NULL) ]
setnames(carsDT, "new_am", "am")
carsDT[.(old_vs = c(0, 1), new_vs = c("v", "straight")), on=.(vs = old_vs),
`:=`(new_vs = i.new_vs, am = NULL) ]
setnames(carsDT, "new_vs", "vs")
summary(airDT)
summary(carsDT)
summary(data.table(a = c(NA, "A")))
carsDT[, table(am)]
carsDT[, .N, by=am]
`carsDT[, .N, by=av][order(-N)][1:3]
carsDT[, .N, by=av][order(-N)][1:3]
carsDT[, .N, by=am][order(-N)][1:3]
?cut
carsDT
carsDT[, cut(drat, 4)]
carsDT[, .N, by=cut(drat, 4)]
carsDT[, .N, by=.(drat_bin = cut(drat, 4))]
carsDT[, .N, by=.(drat_bin = cut(drat, 4))]
# or
carsDT[, drat %>% cut(4) %>% table ]
library(magrittr)
carsDT[, drat %>% cut(4) %>% table %>% plot ]
carsDT[, drat %>% hist(4) ]
args(hist)
?hist
carsDT[, drat %>% hist(3) ]
carsDT[, drat %>% cut(4) %>% table %>% plot ]
carsDT[, drat %>% hist(3) ]
carsDT[, drat %>% hist(4) ]
carsDT[, drat %>% cut(4) %>% table %>% plot ]
carsDT[, plot(table(cut(drat,4))) ]
carsDT[, drat %>% cut(4) %>% table %>% plot ]
carsDT[, hist(drat, 4) ]
lpoly
carsDT[, density(drat)]
carsDT[, density(drat) %>% plot ]
carsDT[, drat %>% density %>% plot ]
carsDT[, drat %>% boxplot ]
carsDT[, quantile(c(.1,.9)) %>% as.list, by=am]
# single-valued functions
carsDT[, mean(drat), by=am]
# multi-valued functions
carsDT[, quantile(drat, c(.1,.9)) %>% as.list, by=am]
carsDT[, quantile(drat, c(.1, .25, .75, .9)) %>% as.list, by=am]
carsDT[, c(
.(mean = mean(drat)),
quantile(drat, c(.1, .25, .75, .9)) %>% as.list
), by=am]
var(carsDT)
is.numeric(1L)
carsDT[, var(.SD), .SDcols = sapply(carsDT, is.numeric)]
sapply(carsDT, is.numeric)
str(carsDT)
carsDT = data.table(mtcars, keep.rownames = TRUE)
carsDT[.(old_vs = c(0, 1), new_vs = c("v", "straight")), on=.(vs = old_vs),
new_vs := i.new_vs ]
carsDT
carsDT[, vs := NULL ]            # drop old column
setnames(carsDT, "new_vs", "vs") # rename new column
carsDT
carsDT[, var(.SD), .SDcols = sapply(carsDT, is.numeric)]
carsDT[, .N, by=.(am, vs, drat_bin = cut(drat, 4))]
carsDT[, table(am, vs, drat_bin = cut(drat, 4))]
carsDT[.(old_am = c(0, 1), new_am = c("auto", "manual")), on=.(am = old_am),
new_am := i.new_am ]           # grab new column
carsDT[, am := NULL ]            # drop old column
setnames(carsDT, "new_am", "am") # rename new column
carsDT[, table(am, vs, drat_bin = cut(drat, 4))]
airDT[, {
hexbin::hexbin(Wind, Temp) %>% plot
NULL
}]
airDT[, {
(hexbin::hexbin(Wind, Temp)) %>% plot
NULL
}]
airDT[, {
hexbin::hexbin(Wind, Temp) %>% plot
NULL
}]
library(hexbin)
airDT[, {
hexbin::hexbin(Wind, Temp) %>% plot
NULL
}]
airDT[, .(Wind, Temp) %>% do.call(plot, .)]
airDT[,  do.call(plot, .(Wind, Temp))]
airDT[,  plot(Wind, Temp)]
airDT[, {
hexbin::hexbin(Wind, Temp) %>% plot
NULL
}]
with(airDT, hexbin::hexbin(Wind, Temp) %>% plot)
airDT[, hexbin::hexbin(Wind, Temp)] %>% plot
carsDT[, cor(.SD), .SDcols = sapply(carsDT, is.numeric)]
library(corrplot)
library('corrplot')
carsDT[, cor(.SD) %>% corrplot::corrplot, .SDcols = sapply(carsDT, is.numeric)]
?curve
curve(x^2, add = TRUE)
curve(3x^2, add = TRUE)
airDT[,  plot(Wind, Temp)]
curve(3x^2, add = TRUE)
curve(3*x^2, add = TRUE)
curve(x^2, add = TRUE)
curve(x/2, add = TRUE)
curve(x*20, add = TRUE)
curve(x*10, add = TRUE)
curve(x*30, add = TRUE)
curve(x*4, add = TRUE)
curve(10 + x*4, add = TRUE)
curve(40 + x*4, add = TRUE)
curve(100 - 3*x, add = TRUE)
base::polyroot()
plot
plot.default
graphics::plot(1,1)
x11()
plot(1,1)
airDT[, qqplot(Wind, Temp)]
airDT[, {qqplot(Wind, Temp); abline(slope=1)}]
args(abline)
args(abline)
airDT[, {qqplot(Wind, Temp); abline(b=1)}]
airDT[, {qqplot(Wind, Temp); abline(a=min(Tem), b=diff(range(Temp))/diff(range(Wind)))}]
airDT[, {qqplot(Wind, Temp); abline(a=min(Temp), b=diff(range(Temp))/diff(range(Wind)))}]
airDT[, min(Temp)]
?qqplot
airDT[, qqplot(Wind, Temp)]
airDT[, .(Wind, Temp)]
sort(airDT[, .(Wind, Temp)])
setorder(airDT[, .(Wind, Temp)])[]
airDT[, qqplot(Wind, Temp)]
?qqplot
carsDT[, drat %>% cut(4) %>% table %>% plot ]
sessionInfo()
lm(y ~ x, data = data.table(y = rnorm(10), x = rnorm(10)))
library(data.table)
lm(y ~ x, data = data.table(y = rnorm(10), x = rnorm(10)))
lm(y ~ x, data = data.table(y = rnorm(10), x = rnorm(10))) -> z
z
str(z)
attributes(z)
methods("lm")
args(methods)
methods(class = "lm")
set.seed(1)
n   = 20
DT  = data.table(y = rnorm(n), x = rnorm(n))
res = DT[, lm(y ~ x)]
attributes(res)
class(res)
methods(class == "lm")
methods(class = "lm")
plot(res)
proj(res)
?plot.lm
plot(res, 1)
lm(y ~ x, data = DT)
set.seed(1)
n   = 20
DT  = data.table(
y = rnorm(n), x = rnorm(n),
z = sample(LETTERS[1:2], n, replace = TRUE)
)
res = DT[, lm(y ~ x)]
attributes(res)
class(res)
methods(class = "lm")
res = DT[, lm(y ~ x + z)]
res
res = DT[, lm(y ~ x + z + x*z)]
res
model = y ~ x + z + x*z
environment(model)
set.seed(1)
n   = 20
DT  = data.table(
y = rnorm(n), x = rnorm(n),
z = sample(LETTERS[1:3], n, replace = TRUE)
)
DT
lm(y ~ z, data = DT)
# including all levels of z by dropping the constant/intercept
lm(y ~ z - 1, data = DT)
# including an interaction term
lm(y ~ z*x, data = DT)
lm(y ~ z:x, data = DT)
lm(y ~ z*x, data = DT)
# including a polynomial
lm(y ~ poly(x, 2), data = DT)
lm(y ~ z*x - 1, data = DT)
lm(y ~ z*x - 1 - x, data = DT)
?predict.lm
DT
lm(y ~ z*x - 1, data = DT)
lm(y ~ z*x - 1 - x, data = DT)
optimise
?optimise
setdiff
unique
union
intersect
?optim
integrate
?integrate
nzchar
?nzchar
nzchar(c("", "2"))
?fwrite
coefficients(res)
sprintf("% 6s", TRUE)
sprintf("% 6s", TRUE)
bwDT = data.table(MASS::birthwt)
bwDT[, {
case = sprintf("high #visits? = % 6s, smoking? = % 6s", .BY$high_vis, .BY$smoke)
cat("Handling case:", case, "...\n")
plot(
age ~ lwt,
main = case
)
}, by=.(high_vis = ftv >= 1, smoke)]
bwDT
bwDT[, {
case = sprintf("high #visits? = % 6s, smoking? = % 6s", .BY$high_vis, .BY$smoke)
cat("Handling case:", case, "...\n")
plot(
age ~ lwt,
main = case
)
}, by=.(high_vis = ftv >= 1, smoke = as.logical(smoke))]
bwDT[, {
case = sprintf("high #visits? = % 5s, smoking? = % 5s", .BY$high_vis, .BY$smoke)
cat("Handling case:", case, "...\n")
plot(
age ~ lwt,
main = case
)
}, by=.(high_vis = ftv >= 1, smoke = as.logical(smoke))]
m
m
m = matrix(1:4, 2)
m
apply(m, 2, I)
colSums
colSums
is.na.data.table
data.table:::is.na.data.table
is.na.data.frame()
is.na.data.frame
args(`[.data.table`)
args(data.table:::address`[.data.table`)
args(data.table:::`[.data.table`)
args(length)
args(demo)
args(help)
args(class)
vector
args(vector)
tDT = data.table(d = as.IDate("2017-01-01") + 0:10)
# find min date greater than today
d_next = tDT[ d > as.IDate(Sys.Date()), min(date) ]
d_next
# check if d_next is past 2099
d_next > as.IDate("2099-01-01")
tDT = data.table(d = as.IDate("2017-01-01") + 0:10)
# find min date greater than today
d_next = tDT[ d > as.IDate(Sys.Date()), min(d) ]
d_next
# check if d_next is past 2099
d_next > as.IDate("2099-01-01")
str(d_next)
as.vector(d_next)
dput(d_next)
d_next2 = tDT[ d > as.IDate(Sys.Date())][order(-d), d[1L] ]
d_next2 = tDT[ d > as.IDate(Sys.Date())][order(-d), d[1L] ]
dput(d_next2)
d_next2 > Sys.Date()
tDT[order(-d)][.(as.IDate(Sys.Date())), roll="first"]
tDT[order(-d)][.(as.IDate(Sys.Date())), roll="first"]
tDT[order(-d)][.(as.IDate(Sys.Date())), roll=-Inf]
tDT[order(-d)][.(as.IDate(Sys.Date())), roll=-Inf]
tDT[order(-d)][.(as.IDate(Sys.Date())),, roll=-Inf]
tDT[order(-d)][.(as.IDate(Sys.Date())),, roll=-Inf]
tDT[order(-d)][.(as.IDate(Sys.Date())), on =.(d), roll=-Inf]
tDT[order(-d)][.(as.IDate(Sys.Date())), on =.(d), roll=-Inf]
tDT[order(-d)][.(as.IDate(Sys.Date())), on =.(d), roll=Inf]
tDT[order(-d)][.(as.IDate(Sys.Date())), on =.(d), roll=Inf, x.d]
tDT[order(-d)][.(as.IDate(Sys.Date())), on =.(d), roll=Inf, x.d]
tDT[order(-d)][.(as.IDate(Sys.Date())), on =.(d), roll=-Inf, x.d]
unclass(d_next)
?bookdown::html_book
intersect("birthweight_graphs.pdf", list.files())
fileDT
fileDT
fileDT = data.table(fn = list.files(pattern="csv$"))
fileDT
for (fn in intersect(fileDT$fn, list.files()))
file.remove(fn)
list.files("_book")
args(list.files)
dir.remove
if (do_clear) unlink("_book")
do_clear=TRUE
if (do_clear) unlink("_book")
dir()
if (do_clear) unlink("_book", recursive = TRUE)
