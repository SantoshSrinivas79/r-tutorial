str(as.vector(DF))
?as.vector
head(unclass(DF), 2)
DF == unclass(DF)
all.equal(DF, unclass(DF))
names(unclass(DF))
L = list(x = c(1,2,3), y = c("a", "b", "c"), z = c(1L, 2L, 3L))
DF = as.data.frame(L)
head(L, 2)
head(DF, 2)
L = list(x = c(1,2,3), y = c("a", "b", "c"), z = c(1L, 2L, 3L))
head(L, 2)
DF = as.data.frame(L)
head(DF, 2)
L = list(x = c(1,2,3), y = c("a", "b", "c"), z = c(1L, 2L, 3L))
head(L, 1)
DF = as.data.frame(L)
head(DF, 1)
L = list(x = c(1,2,3), y = c("a", "b", "c"), z = c("", "B", "C"))
head(L, 1)
DF = as.data.frame(L)
head(DF, 1)
L = list(x = c(1,2,3), y = c("a", "b", "c"), z = c(3L, 2L, 1L))
head(L, 1)
DF = as.data.frame(L)
head(DF, 1)
head
?methods
methods("head")
methods
methods(class="data.frame")
?methods
?head
?distributions
set.seed(1)
rnorm(10)
?sample
sample(10, prob = c(.1,.2))
x = c(3.14, 4.15, 5.16, 6.17)
sample(x, 2, replace = TRUE)
y = c(3.14)
sample(y, size = 2, replace = TRUE)
x = c(6.17, 5.16, 4.15, 3.14)
sample(x, 2, replace = TRUE)
y = c(6.17)
sample(y, size = 2, replace = TRUE)
set.seed(1)
x = c(6.17, 5.16, 4.15, 3.14)
sample(x, 2, replace = TRUE)
y = c(6.17)
sample(y, size = 2, replace = TRUE)
set.seed(11)
x = c(6.17, 5.16, 4.15, 3.14)
sample(x, 2, replace = TRUE)
y = c(6.17)
sample(y, size = 2, replace = TRUE)
set.seed(1)
x = c(6.17, 5.16, 4.15, 3.14)
sample(x, 2, replace = TRUE)
y = c(6.17)
sample(y, size = 2, replace = TRUE)
?sample
y[sample.int(length(y), size = 2)]
y[sample.int(length(y), size = 2, replace = TRUE)]
z = "a"
sample(z, size = 2, replace = TRUE)
seq(from = 1, to = 101, by = 10)
seq(from = 1, to = 9, by = 2)
seq(from = 101, to = 1, by = 10)
seq(from = 101, to = 1, by = -10)
?seq
seq(from = 1, by = 15, length.out = 100)
seq(to = 100, by = 11, length.out = 3)
seq(to = 100, by = 10, length.out = 5)
?sequence
?seq
sequence(from = "2011-11-11", to = "2015-01-01", by = "month")
seq.Date(from = "2011-11-11", to = "2015-01-01", by = "month")
seq.Date(from = as.Date("2011-11-11"), to = "2015-01-01", by = "month")
seq.Date(from = as.Date("2011-11-11"), to = as.Date("2015-01-01"), by = "month")
seq.Date(from = as.Date("2013-11-11"), to = as.Date("2015-01-01"), by = "month")
?replace
replace(1, FALSE, )
replace(1, FALSE, 2)
replace(c(1,2), c(F,T), 2)
replace(c(1,2), c(F,T), 4)
cond = (1:5) > 3
which(cond)
cond = (2:6) > 3
which(cond)
cond = c("aleph", "baz", "boz") > "b"
which(cond)
set.seed(1)
n  = 1000
x  = rchisq(n, df = 10)
xc = cut(x, breaks = c(0, 5, 10, 15, 20, Inf))
table(xc)
plot(xc)
?findInterval
?cut
findInterval(x, vec = c(0, 5, 10, 15, 20, Inf))
i = findInterval(x, vec = c(0, 5, 10, 15, 20, Inf))
summary(i)
summary(factor(i))
?findInterval
hist(x, breaks = c(0, 5, 10, 15, 20, Inf))
?hist
hist(x, breaks = c(0, 5, 10, 15, 20, max(x)))
hist(x, breaks = c(0, 5, 10, 15, 20, max(x)), plot = FALSE)
hist(x, breaks = c(0, 5, 10, 15, 20, Inf), plot = FALSE)
set.seed(1)
n  = 50
f  = factor(c("a", "b", "c"))
x  = f[ sample.int(length(f), size = n) ]
x  = f[ sample.int(length(f), size = n, replace = TRUE) ]
x
plot(x)
set.seed(1)
n  = 100
f  = factor(c("a", "b", "c"))
x  = f[ sample.int(length(f), size = n, replace = TRUE) ]
plot(x)
table(x)
plot(table(x))
plot(x)
methods("plot")
methods(class="table")
x
hist(x)
set.seed(1)
n  = 1000
x  = rchisq(n, df = 10)
xc = cut(x, breaks = c(0, 5, 10, 15, 20, Inf)) # or max(x) in place of Inf
table(xc)
hist(x)
set.seed(1)
x = rpoisson(100)
set.seed(1)
x = rpois(100)
set.seed(1)
x = rpois(100, lambda = 1/10)
x
set.seed(1)
x = rpois(100, lambda = 10)
x
table(above10 = x > 10)
set.seed(1)
n = 100
x = rpois(n, lambda = 10)
y = x^2 + rpois(n, lambda = 10)
table(above10 = x > 10)
set.seed(1)
n = 100
x = rpois(n, lambda = 10)
y = x^2 + rpois(n, lambda = 10)
table(hix = x > 10, hiy = y > x + 100)
table(hix = x > 10, hiy = y > x + 50)
xtab_set <- function(A, B){
both    <-  union(A, B)
inA     <-  both %in% A
inB     <-  both %in% B
return(table(inA, inB))
}
set.seed(1)
A <- sample(letters[1:20], 10, replace = TRUE)
B <- sample(letters[1:20], 10, replace = TRUE)
xtab_set(A, B)
xtab_set <- function(A, B){
both    <-  c(A, B)
inA     <-  both %in% A
inB     <-  both %in% B
return(table(inA, inB))
}
set.seed(1)
A <- sample(letters[1:20], 10, replace = TRUE)
B <- sample(letters[1:20], 10, replace = TRUE)
xtab_set(A, B)
DF
DF = data.frame(x = 1:3, y = 4:6)
DF$x + DF$y
within(DF,{z = x + y})
transform(DF, z = x + y)
x = c(1,1,1, 0,0)
transform(rle(x), z = 3)
x = c(1, 1, 1, 0, 0, 1, 1)
rle(x)
x = c(1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1)
rle(x)
r = rle(x)
new_r = with(r, {
lengths = tail(lengths, 3)
values  = tail(values, 3)
})
inverse.rle(new_r)
new_r
r = rle(x)
new_r = within(r, {
lengths = tail(lengths, 3)
values  = tail(values, 3)
})
inverse.rle(new_r)
r = rle(x)
new_r = with(r, {
new_lengths = tail(lengths, 3)
new_values  = tail(values, 3)
list(lengths = new_lengths, values = new_values)
})
inverse.rle(new_r)
x
new_r
?with
library(fortunes)
?fortune
fortunes("attach")
fortune("attach")
fortune("Ripley")
?replications
?rep
?vector
?logical
?numericD
?numeric
character(3)
max
min
ceiling
floor
?letters
?weekdays
weekdays
?NumericConstants
?Reserved
pi
pi0 = pi
pi = 2
pi
TRUE = 2
rm(pi)
pi
?plotmath
library(help="datasets")
library(help="R-intro")
?library
T = 2
devtools::install_github("rstudio/bookdown")
install.pacakges('devtools')
install.packages('devtools')
devtools::install_github("rstudio/bookdown")
install.packages('Rcpp')
install.packages("Rcpp")
devtools::install_github("rstudio/bookdown")
getwd()
getwd()
remove.packages("data.table")         # First remove the current version
install.packages("data.table")
remove.packages("data.table")
remove.packages("data.table")                         # First remove the current version
install.packages("data.table", type = "source",
repos = "http://Rdatatable.github.io/data.table") # Then install devel version
library(data.table)
remove.packages("data.table")         # First remove the current version
install.packages("data.table")
install.packages("data.table", type = "source",
repos = "http://Rdatatable.github.io/data.table") # Then install devel version
remove.packages("data.table")                         # First remove the current version
install.packages("data.table", type = "source",
repos = "http://Rdatatable.github.io/data.table") # Then install devel version
library(data.table)
---
x = 1
y = x
typeof(y)
str(y)
x = c(a=1,b=2)
names(x)
c(1, X = c(a = 2, b = 3, 4))
c(A = 1, A = 1)
list(1)[NA_integer_]
m = matrix(c(1,2,3,4), nrow = 2)
im = matrix(c(1,1,2,2), 2, 2, byrow=TRUE)
m[c(2,3)]
m[im]
im
v = 1:3
v[c(1,1)] = 2
v[c(1,1)] = c(2,3)
v
v[c(1,1)] = c(4,5)
v
m = matrix(c(1,2,3,4,5,6), nrow = 2)
m[1, c(1,2), drop = FALSE]
m[, 2, drop = FALSE]
m[, 2]
m[3]
m[c(2,3)]
im = matrix(c(1,1,2,2), 2, 2, byrow=TRUE)
m[im]
.1 + .05 - .15 == 0
c(-2,2) ^ c(1,2,3,4)
is_gt = c(1,5,2) > c(1,2,3); sum(is_gt)
"4.11" == 4.11
2==NA
2!=NA
(3:4)[-(1:2)]
(1:2)[NA_real_]
(1:2)[NA]
c(1, 3, NA) %in% c(1, 2, NA)
c(1, 3, NA) %in% c(1, 2)
"A" %in% c("A", "A", "B")
DT[, a := 1L][]
DT[, a := 2L][]
getwd()
install.packages('digest')
devtools::install_github('rstudio/bookdown')
# example data
L = list(X = 1, Y = 2, Z = 3)
L["Z"] # slicing
# $Z
# [1] 3
L[["Z"]] # extracting
m = matrix(c(1,2,3,4,5,6), nrow = 2, dimnames = list(c("a", "b"), c("x", "y", "z")))
m[3]
m[c(2,3)]
im = matrix(c(1,1,2,2), 2, 2, byrow=TRUE)
m[im]
m["a", "y"]
m[1, 2]
m
?namespace
?Namespace
?`::~`
?`::`
utils:::head.default
?.subset
DT = data.table(
x = letters[c(1, 2, 3, 4, 5)],
y = c(1, 2, 3, 4, 5),
z = c(1, 2, 3, 4, 5) > 3
)
library(data.table)
DT = data.table(
x = letters[c(1, 2, 3, 4, 5)],
y = c(1, 2, 3, 4, 5),
z = c(1, 2, 3, 4, 5) > 3
)
DT[x > "b", sum(y), by=z]
DT[x > "b", sum(y), by=z, verbose=TRUE]
DT[x > "b", sum(y), by=z]
DT[x > "b", sum(y), by=z, verbose=TRUE]
warnings()
DT = data.table(
x = letters[c(1, 2, 3, 4, 5)],
y = c(1, 2, 3, 4, 5),
z = c(1, 2, 3, 4, 5) > 3
)
warnings()
warnings()
args(warnings)
?warnings
DT[, `:=`(W1 = x, W2 = W1^2)]
DT
warnings()
warnings()
warnings()
warnings()
DT[, `:=`(W1 = x, W2 = W1^2)]
DT[, `:=`(W1 = x, W2 = W1^2)]
DT[, `:=`(W1 = W1 <- x + y, W2 = W1^2)]
DT
DT[, b := "Ants"][y > 1, b := "Gerbils", verbose = TRUE]
DT
?.SDcols
a = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), x = 11:15)
.Last.value
x <- 2
.Last.value
?.
?data.table:::.
x
x
?bookdown::build_chapter
b[a, on="id", .N, by=.EACHI]
a = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), x = 11:15)
a
b = data.table(id = 1:2, y = -(1:2))
b
b[a, on="id", .N, by=.EACHI]
a[b, on="id", .N, by=.EACHI]
a
b
b[!a, on=.(id)]
a[!b, on=.(id)]
a[!b, on=.(id)]
fsetdiff(a, b)
fsetdiff(a, b)
x
x
a[!b, on=.(id)]
b
b
str(b)
str(b)
a[b, on=.(id), y := i.y ]
warnings()
a[b, on=.(id), y := i.y ]
a[b, on=.(id)]
a
b[]
b[]
b[a, on=.(id)]
b[a, on=.(id), x := i.x ][]
b[a, on=.(id), x := i.x ][]
b[a, on=.(id), x := i.x, verbose = TRUE TRUE][]
b[a, on=.(id), x := i.x, verbose = TRUE][]
b[a, on=.(id), x := i.x, verbose = TRUE, by=.EACHI][]
b[a, on=.(id), x := if (.N==1L) i.x else stop(do.call(paste, c("Bad:", .BY))), verbose = TRUE][]
b[a, on=.(id), x := if (.N==1L) i.x else stop(do.call(paste, c(.("Bad:"), .BY))), verbose = TRUE][]
b[a, on=.(id), x := if (.N==1L) i.x else stop(do.call(paste, c("Bad:", .BY))), by=.EACHI, verbose = TRUE][]
b[a, on=.(id), x := if (.N==1L) i.x else stop(do.call(paste, c("Bad:", .BY))), by=.EACHI, verbose = TRUE][]
b[a, on=.(id), .N, by=.EACHI, verbose = TRUE][]
a[b, on=.(id), .N, by=.EACHI][, range(.N)]
a[b, on=.(id), .N, by=.EACHI]
a[b, on=.(id), .N, by=.EACHI][, range(N)]
1
library(data.table)
a <- data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), x = 11:15)
b <- data.table(id = 1:2, y = -(1:2))
b[a, on=.(id), x := i.x, verbose = TRUE][]
# Calculated ad hoc index in 0 secs
# Starting bmerge ...done in 0 secs
# Detected that j uses these columns: x,i.x
# Assigning to 3 row subset of 2 rows
?.Last.value
1
personDT = data.table(id = 1:2, name = LETTERS[1:2])
placeDT = data.table(id = 1:2, name = state.abb[1:2])
personDT
placeDT
perDT = data.table(id = 1:2, name = LETTERS[1:2])
locDT = data.table(id = 1:2, name = state.abb[1:2])
psnDT = data.table(id = 1:2, name = LETTERS[1:2])
locDT = data.table(id = 1:2, name = state.abb[1:2])
psnDT[locDT, on=.()]
psnDT[, .cjid := NA ]
locDT[, .cjid := NA ]
visitDT = psnDT[locDT, on=.(.cjid)]
psnDT[locDT, on=.(.cjid)]
visitDT = psnDT[locDT, on=.(.cjid), !"cjid"]
visitDT
visitDT = psnDT[locDT, on=.(.cjid), !".cjid"]
visitDT
visitDT = psnDT[locDT, on=.(.cjid)][, !".cjid"]
visitDT
psnDT[, .cjid := NA ]
locDT[, .cjid := NA ]
visitDT = psnDT[locDT, on=.(.cjid)][, .cjid := NULL ]
visitDT
psnDT[, .cjid := NULL ] # cleanup
locDT[, .cjid := NULL ]
visitDT
psnDT[, .cjid := NA ]
locDT[, .cjid := NA ]
visitDT = psnDT[locDT, on=.(.cjid)][, .cjid := NULL ][]
psnDT[, .cjid := NULL ] # cleanup
locDT[, .cjid := NULL ]
psnDT[, .cjid := NA ]
locDT[, .cjid := NA ]
visitDT = psnDT[locDT, on=.(.cjid)][, .cjid := NULL ][]
psnDT[, .cjid := NULL ] # cleanup
locDT[, .cjid := NULL ]
visitDT = psnDT[locDT, on=.(.cjid)][, .cjid := NULL ][]
psnDT[, .cjid := NA ]
locDT[, .cjid := NA ]
visitDT = psnDT[locDT, on=.(.cjid)][, .cjid := NULL ][]
visitDT
psnDT[, .cjid := NA ]
locDT[, .cjid := NA ]
visitDT = psnDT[locDT, on=.(.cjid),
.(psn_id = x.id, loc_id = i.id, psn_name = x.id, loc_name = i.id)]
visitDT
x = c(1,1,1,2,2)
with(rle(x), lengths)
diag(4)
diag(3)[1:2,]
diag(diag(3)[1:2,])
replace(numeric(5), 3, 1)
?head.data.frame
head
methods("head", class(1))
methods("head", class(data.table(1)))
library(data.table)
library(data.table)
methods("head", class(data.table(1)))
?rle
f = function(x) x
c(LETTERS, letters)
# example data
x = c(TRUE, FALSE, TRUE)
x
# [1]  TRUE FALSE  TRUE
length(x)
# [1] 3
class(x)
# [1] "logical"
help.start()
T
array()
args(array)
args(matrix)
array
upper.tri
devtools::install_github("rstudio/rmarkdown")
